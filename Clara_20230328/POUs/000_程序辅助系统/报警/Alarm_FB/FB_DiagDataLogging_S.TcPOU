<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_DiagDataLogging_S" Id="{b99ac1be-dc9c-4b96-8646-6f2a3cdcb0ba}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DiagDataLogging_S
(*历史文件夹操作*)
VAR_INPUT
	bInUse:							BOOL:=TRUE;(*是否使能功能*)
	bCopyToUSB:						BOOL;(*把文件夹复制到u盘*)

	b_DiagDataLog_AutoDelete:		BOOL:=TRUE;	(* Auto Deletion of Logged Files / highly recommended!	*)(*是否自动删除文件*)
	n_DiagDataLog_KeepForWeeks:		INT:=4;

	bDiagDataLogRunOn_WinCE:		BOOL:=FALSE;
	cnst_DiagDataLogFilePath_XP:	STRING(255):='C:\';
	cnst_DiagDataLogFilePath_CE:	STRING(255):='Hard Disk\';

	cnst_USB_FilePath_XP:			STRING(255):='E:\';
	cnst_USB_FilePath_CE:			STRING(255):='Hard Disk2\';

	cnst_SubDir_DiagDataLog:		STRING(255):='DiagDataLog\';(*文件夹名称*)
	cnst_FileName:					STRING(255):='Sym';(*文件的前缀名*)

END_VAR
VAR_IN_OUT
	sInputString:					STRING(255);(*请先转换成utf8的格式*)
END_VAR
VAR_OUTPUT
	bBusyWriting:					BOOL;
	sWriteData:						STRING(255);
END_VAR
VAR
	nTaskIdx:						BYTE:=0;
	fbGetTaskIdx:					GETCURTASKINDEX;
	fCycleTime:						LREAL;//s

	StartUp:						BOOL:=TRUE;
	count:							INT;
	dtemp:							DINT;
	dtemp2:							DINT;
	stemp:							STRING(255);
	stemp_Del:						STRING(255);
	btemp:							BOOL;

	aStringBuffer:					ARRAY[1..10] OF STRING(255);
	sActUseingString:				STRING(255);
	bInputDoWrite:					BOOL;

	nWrState:						INT;
	sWrite:							STRING(255);
	stWrTime:						TIMESTRUCT;
	fbFormat:						FB_FormatString;
	fbOpen:							FB_FileOpen;
	fbWrite:						FB_FileWrite;
	fbClose:						FB_FileClose;

	nState:							INT;
	nEntries:						INT;
	fbMakeDir:						FB_CreateDir;
	fbGetTime:						NT_GetTime;
	msecond:						UDINT;

	delstep:						INT:=0;
	CopyStep: 						INT:=0;
	deldatestart:					TIMESTRUCT;
	deldate:						TIMESTRUCT;
	fbdelete:						FB_FileDelete;
	fbDirectoryCopy:				FB_DirectoryCopy;
	fdeltime:						LREAL;
	ntemp:							INT;// save days
	sFile:							STRING(255);
	bClearLined:					BOOL;

	bInitialWrite:					BOOL:=TRUE;
	bFirstLog:						BOOL:=TRUE;

	bDiagDataLog_Release : 			BOOL;
	stDiagDataLogTime:				TIMESTRUCT;

	i: INT;
	by_day_or_hour				:BOOL;//1:by_day,0:by_hour
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInUse THEN(*是否使能功能*)
	StartUp:=TRUE;
	RETURN;
END_IF

IF StartUp THEN
	(* get cycle time of this task	*)
	fbGetTaskIdx();
	nTaskIdx:=MAX(MIN(fbGetTaskIdx.index,4),1);
	fCycleTime:=UDINT_TO_LREAL(_TaskInfo[nTaskIdx].CycleTime)/10000000.0;
	nState:=0;
	IF fCycleTime<>0 THEN
		StartUp:=FALSE;
	END_IF
END_IF

act_CheckCom();		(*命令处理*)
//act_Copy2USB();		(*复制到其它文件夹*)
IF by_day_or_hour  THEN 	
	act_AutoWrite_by_day();
	act_AutoDelete_by_day();
ELSE
	act_AutoWrite_by_hour();	(*写*)
	act_AutoDelete_by_hour();	(*删除旧文件*)
END_IF
]]></ST>
    </Implementation>
    <Action Name="act_AutoDelete_by_day" Id="{65299b03-d6da-42f7-922b-c45f8c938c34}">
      <Implementation>
        <ST><![CDATA[
CASE delstep OF
0://获取删除开始时间
	fdeltime:=10.0;
	IF b_DiagDataLog_AutoDelete AND (stDiagDataLogTime.wYear>0) AND (n_DiagDataLog_KeepForWeeks>0) THEN
		ntemp:=1+7*MIN(MAX(n_DiagDataLog_KeepForWeeks,4),4000);//计算保存days+1
		deldate:=stDiagDataLogTime;//
		WHILE (ntemp>0) DO
			IF (deldate.wDay<2) THEN
				deldate.wDay:=deldate.wDay+28;
				deldate.wMonth:=deldate.wMonth-1;
				IF (deldate.wMonth<1) THEN
					deldate.wMonth:=12;
					deldate.wYear:=deldate.wYear-1;
				END_IF
			END_IF
			IF (deldate.wDay=ntemp) THEN//假如相等，表明在单月，从1号开始算
				deldate.wDay:=1;
				ntemp:=1;
			ELSIF (deldate.wDay>ntemp) THEN
				deldate.wDay:=deldate.wDay-ntemp;
				ntemp:=0;
			ELSE
				ntemp:=ntemp-deldate.wDay;
				deldate.wDay:=1;
			END_IF
		END_WHILE
		deldatestart:=deldate;
		delstep:=1;
	END_IF

1:	//第一次10S跳步骤2，下一次每1.5S跳一次
	fdeltime:=fdeltime-fCycleTime;
	IF NOT b_DiagDataLog_AutoDelete THEN
		delstep:=0;
	ELSIF (fdeltime<=0.0) THEN
		delstep:=2;
	END_IF

2://根据删除时间，生成删除文件名，并进行删除
	IF bDiagDataLogRunOn_WinCE THEN
		sFile:=CONCAT(cnst_DiagDataLogFilePath_CE,cnst_SubDir_DiagDataLog);
	ELSE
		sFile:=CONCAT(cnst_DiagDataLogFilePath_XP,cnst_SubDir_DiagDataLog);
	END_IF
	sFile:=CONCAT(sFile,cnst_FileName);
	stemp_Del:=WORD_TO_STRING(deldate.wYear);
	stemp_Del:=CONCAT(stemp_Del,'_');
	IF (deldate.wMonth<10) THEN
		stemp_Del:=CONCAT(stemp_Del,'0');
	END_IF
	stemp_Del:=CONCAT(stemp_Del,WORD_TO_STRING(deldate.wMonth));
	stemp_Del:=CONCAT(stemp_Del,'_');
	IF (deldate.wDay<10) THEN
		stemp_Del:=CONCAT(stemp_Del,'0');
	END_IF
	stemp_Del:=CONCAT(stemp_Del,WORD_TO_STRING(deldate.wDay));
	(*stemp_Del:=CONCAT(stemp_Del,'_');
	IF(deldate.wHour<10)THEN
		stemp_Del:=CONCAT(stemp_Del,'0');
	END_IF
	stemp_Del:=CONCAT(stemp_Del,WORD_TO_STRING(deldate.wHour));
	*)
	stemp_Del:=CONCAT(stemp_Del,'.LOG');
	fbdelete.sPathName:=CONCAT(sFile,stemp_Del);
	fbdelete.bExecute:=TRUE;
	delstep:=3;

3://生成下一个删除时间，每过24个月重新回到1，记录开始删除时间
	IF NOT fbdelete.bBusy THEN
		fbdelete.bExecute:=FALSE;
		(*IF (deldate.wHour=0) THEN
			deldate.wHour:=23;
			deldate.wDay:=deldate.wDay-1;
		ELSE
			deldate.wHour:=deldate.wHour-1;
		END_IF*)
		deldate.wDay:=deldate.wDay-1;
		IF (deldate.wDay<1) THEN
			deldate.wDay:=31;
			deldate.wMonth:=deldate.wMonth-1;
		END_IF
		IF (deldate.wMonth<1) THEN
			deldate.wMonth:=12;
			deldate.wYear:=deldate.wYear-1;
		END_IF
		fdeltime:=1.5;
		dtemp:=12*WORD_TO_DINT(deldatestart.wYear-deldate.wYear)+WORD_TO_DINT(deldatestart.wMonth-deldate.wMonth);//已删除的月数
		IF (dtemp>24) THEN//删除月数大于24个月，重新开始
			delstep:=0;
		ELSE
			delstep:=1;
		END_IF
	END_IF

ELSE
	delstep:=0;

END_CASE

fbdelete();]]></ST>
      </Implementation>
    </Action>
    <Action Name="act_AutoDelete_by_hour" Id="{a20d2547-96b2-4d54-922a-6ed6d60639e4}">
      <Implementation>
        <ST><![CDATA[
CASE delstep OF
0://获取删除开始时间
	fdeltime:=10.0;
	IF b_DiagDataLog_AutoDelete AND (stDiagDataLogTime.wYear>0) AND (n_DiagDataLog_KeepForWeeks>0) THEN
		ntemp:=1+7*MIN(MAX(n_DiagDataLog_KeepForWeeks,4),4000);//计算保存days+1
		deldate:=stDiagDataLogTime;//
		WHILE (ntemp>0) DO
			IF (deldate.wDay<2) THEN
				deldate.wDay:=deldate.wDay+28;
				deldate.wMonth:=deldate.wMonth-1;
				IF (deldate.wMonth<1) THEN
					deldate.wMonth:=12;
					deldate.wYear:=deldate.wYear-1;
				END_IF
			END_IF
			IF (deldate.wDay=ntemp) THEN//假如相等，表明在单月，从1号开始算
				deldate.wDay:=1;
				ntemp:=1;
			ELSIF (deldate.wDay>ntemp) THEN
				deldate.wDay:=deldate.wDay-ntemp;
				ntemp:=0;
			ELSE
				ntemp:=ntemp-deldate.wDay;
				deldate.wDay:=1;
			END_IF
		END_WHILE
		deldatestart:=deldate;
		delstep:=1;
	END_IF

1:	//第一次10S跳步骤2，下一次每1.5S跳一次
	fdeltime:=fdeltime-fCycleTime;
	IF NOT b_DiagDataLog_AutoDelete THEN
		delstep:=0;
	ELSIF (fdeltime<=0.0) THEN
		delstep:=2;
	END_IF

2://根据删除时间，生成删除文件名，并进行删除
	IF bDiagDataLogRunOn_WinCE THEN
		sFile:=CONCAT(cnst_DiagDataLogFilePath_CE,cnst_SubDir_DiagDataLog);
	ELSE
		sFile:=CONCAT(cnst_DiagDataLogFilePath_XP,cnst_SubDir_DiagDataLog);
	END_IF
	sFile:=CONCAT(sFile,cnst_FileName);
	stemp_Del:=WORD_TO_STRING(deldate.wYear);
	stemp_Del:=CONCAT(stemp_Del,'_');
	IF (deldate.wMonth<10) THEN
		stemp_Del:=CONCAT(stemp_Del,'0');
	END_IF
	stemp_Del:=CONCAT(stemp_Del,WORD_TO_STRING(deldate.wMonth));
	stemp_Del:=CONCAT(stemp_Del,'_');
	IF (deldate.wDay<10) THEN
		stemp_Del:=CONCAT(stemp_Del,'0');
	END_IF
	stemp_Del:=CONCAT(stemp_Del,WORD_TO_STRING(deldate.wDay));
	stemp_Del:=CONCAT(stemp_Del,'_');
	IF(deldate.wHour<10)THEN
		stemp_Del:=CONCAT(stemp_Del,'0');
	END_IF
	stemp_Del:=CONCAT(stemp_Del,WORD_TO_STRING(deldate.wHour));
	stemp_Del:=CONCAT(stemp_Del,'.LOG');
	fbdelete.sPathName:=CONCAT(sFile,stemp_Del);
	fbdelete.bExecute:=TRUE;
	delstep:=3;

3://生成下一个删除时间，每过24个月重新回到1，记录开始删除时间
	IF NOT fbdelete.bBusy THEN
		fbdelete.bExecute:=FALSE;
		IF (deldate.wHour=0) THEN
			deldate.wHour:=23;
			deldate.wDay:=deldate.wDay-1;
		ELSE
			deldate.wHour:=deldate.wHour-1;
		END_IF
		IF (deldate.wDay<1) THEN
			deldate.wDay:=31;
			deldate.wMonth:=deldate.wMonth-1;
		END_IF
		IF (deldate.wMonth<1) THEN
			deldate.wMonth:=12;
			deldate.wYear:=deldate.wYear-1;
		END_IF
		fdeltime:=1.5;
		dtemp:=12*WORD_TO_DINT(deldatestart.wYear-deldate.wYear)+WORD_TO_DINT(deldatestart.wMonth-deldate.wMonth);//已删除的月数
		IF (dtemp>24) THEN//删除月数大于24个月，重新开始
			delstep:=0;
		ELSE
			delstep:=1;
		END_IF
	END_IF

ELSE
	delstep:=0;

END_CASE

fbdelete();]]></ST>
      </Implementation>
    </Action>
    <Action Name="act_AutoWrite_by_day" Id="{2a7b4226-0ccf-4567-85b6-d2325f1bdc44}">
      <Implementation>
        <ST><![CDATA[(*以“年月日时”为名称。也就是说，每小时产生一个
新的文件，以防止文件过大
*)

CASE nState OF

0:	(*wait for clearance*)
	nEntries:=0;
	bInputDoWrite:=bDiagDataLog_Release:=FALSE;
	nWrState:=0;
	IF NOT StartUp THEN
		nState:=1;
	END_IF

1:	(*try to create the directory*)
	fbMakeDir.bExecute:=FALSE;
	fbGetTime.START:=FALSE;
	fbMakeDir.sNetId:='';
	IF bDiagDataLogRunOn_WinCE THEN
		fbMakeDir.sPathName:=CONCAT(cnst_DiagDataLogFilePath_CE,cnst_SubDir_DiagDataLog);
	ELSE
		fbMakeDir.sPathName:=CONCAT(cnst_DiagDataLogFilePath_XP,cnst_SubDir_DiagDataLog);
	END_IF
	fbMakeDir.ePath:=PATH_GENERIC;
	fbMakeDir.tTimeout:=T#5s;
	nState:=2;

2:	fbMakeDir();
	fbGetTime();
	IF NOT fbMakeDir.bExecute THEN
		fbMakeDir.bExecute:=TRUE;
	ELSIF NOT fbMakeDir.bBusy THEN
		IF NOT fbGetTime.START THEN
			fbGetTime.START:=TRUE;
		ELSIF NOT fbGetTime.BUSY THEN
			IF fbGetTime.ERR THEN
				stDiagDataLogTime.wYear:=stDiagDataLogTime.wMonth:=stDiagDataLogTime.wDay:=0;
				stDiagDataLogTime.wHour:=stDiagDataLogTime.wMinute:=stDiagDataLogTime.wSecond:=0;
				stDiagDataLogTime.wMilliseconds:=0;
				msecond:=0;
			ELSE
				stDiagDataLogTime:=fbGetTime.TIMESTR;
				msecond:=fbGetTime.TIMESTR.wMilliseconds;
			END_IF
			fbGetTime(START:=FALSE);
			fbMakeDir(bExecute:=FALSE);
			nState:=11;
		END_IF
	END_IF


11:
	IF(nState>=10)THEN
		(*update and/or synchronize the clock*)
		stDiagDataLogTime.wMilliseconds:=stDiagDataLogTime.wMilliseconds+LREAL_TO_WORD(MIN(MAX(1000.0*fCycleTime,1.0),30000.0));
	
		IF(stDiagDataLogTime.wMilliseconds>=1000)THEN
			stDiagDataLogTime.wMilliseconds:=stDiagDataLogTime.wMilliseconds-1000;
			stDiagDataLogTime.wSecond:=stDiagDataLogTime.wSecond+1;
			IF(stDiagDataLogTime.wSecond>=60)THEN
				stDiagDataLogTime.wSecond:=stDiagDataLogTime.wSecond-60;
				stDiagDataLogTime.wMinute:=stDiagDataLogTime.wMinute+1;
				IF(stDiagDataLogTime.wMinute>=60)THEN
					stDiagDataLogTime.wMinute:=stDiagDataLogTime.wMinute-60;
					stDiagDataLogTime.wHour:=stDiagDataLogTime.wHour+1;
				END_IF
			END_IF
		END_IF
		msecond:=msecond+LREAL_TO_WORD(MIN(MAX(1000.0*fCycleTime,1.0),30000.0));
		fbGetTime(START:=(msecond>1100));
		IF fbGetTime.START THEN
			IF(NOT fbGetTime.BUSY)THEN
				IF(fbGetTime.ERR)THEN
					msecond:=0;
				ELSE
					stDiagDataLogTime:=fbGetTime.TIMESTR;
					msecond:=fbGetTime.TIMESTR.wMilliseconds;
				END_IF
			END_IF
		END_IF

		CASE nWrState OF

			0:	IF bInputDoWrite THEN
					bBusyWriting:= TRUE;
					IF bDiagDataLogRunOn_WinCE THEN
						sWrite:=CONCAT(cnst_DiagDataLogFilePath_CE,cnst_SubDir_DiagDataLog);
					ELSE
						sWrite:=CONCAT(cnst_DiagDataLogFilePath_XP,cnst_SubDir_DiagDataLog);//C:\DiagDataLog\
					END_IF
					sWrite:=CONCAT(sWrite,cnst_FileName);//C:\DiagDataLog\Sym
					stWrTime:=stDiagDataLogTime;
					stemp:=WORD_TO_STRING(stWrTime.wYear);//2020
					stemp:=CONCAT(stemp,'_');////2020_
					IF(stWrTime.wMonth<10)THEN//月份小于10，在月前加0
						stemp:=CONCAT(stemp,'0');////2020_06
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wMonth));
					stemp:=CONCAT(stemp,'_');//2020_06_
					IF(stWrTime.wDay<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wDay));//2020_06_30
					(*stemp:=CONCAT(stemp,'_');//2020_06_30_
					IF(stWrTime.wHour<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wHour));//2020_06_30_14,把小时记录
					*)
					stemp:=CONCAT(stemp,'.LOG');//2020_06_30_14.LOG,把小时记录
					fbOpen.sPathName:=CONCAT(sWrite,stemp);//C:\DiagDataLog\2020_06_30_14.LOG,完整名称
					fbOpen.bExecute:=FALSE;
					nWrState:=1;
				END_IF
	
			1:	fbOpen(sNetId:='', nMode:=FOPEN_MODEAPPEND OR FOPEN_MODETEXT, ePath:=PATH_GENERIC, tTimeout:=T#5S);
				IF NOT fbOpen.bExecute THEN
					fbOpen.bExecute:=TRUE;
				ELSIF NOT fbOpen.bBusy THEN
					IF fbOpen.bError THEN
						bInputDoWrite:=FALSE;
						nWrState:=0;
					ELSE
						fbWrite(sNetId:='', hFile:=fbOpen.hFile, pWriteBuff:=0, cbWriteLen:=0, bExecute:=FALSE, tTimeout:=T#5s);
						fbClose(sNetId:='', hFile:=fbOpen.hFile, bExecute:=FALSE, tTimeout:=T#5s);
						nWrState:=2;
					END_IF
					fbOpen(bExecute:=FALSE);
				END_IF

			2:	(**)
					stemp:=WORD_TO_STRING(stWrTime.wYear);
					stemp:=CONCAT(stemp,'.');
					IF(stWrTime.wMonth<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wMonth));
					stemp:=CONCAT(stemp,'.');
					IF(stWrTime.wDay<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wDay));
					stemp:=CONCAT(stemp,'|');
					IF(stWrTime.wHour<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wHour));
					stemp:=CONCAT(stemp,':');
					IF(stWrTime.wMinute<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wMinute));
					stemp:=CONCAT(stemp,':');
					IF(stWrTime.wSecond<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wSecond));
					stemp:=CONCAT(stemp,':');
					IF(stWrTime.wMilliseconds<10)THEN
						stemp:=CONCAT(stemp,'00');
					END_IF
					IF(stWrTime.wMilliseconds<100)
					AND stWrTime.wMilliseconds>=10 THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wMilliseconds));
					stemp:=CONCAT(stemp,'|');
					string_to_utf8(ADR(sTemp),ADR(STemp),SIZEOF(sTemp));//强制转换成utf8的格式，才能显示中文

				sWriteData:=sWrite:=CONCAT((stemp) , sActUseingString);
				sWrite:=CONCAT(sWrite,'$n');
				fbWrite(pWriteBuff:=ADR(sWrite), cbWriteLen:=LEN(sWrite), bExecute:=TRUE);
				nWrState:=3;

			3:	fbWrite(pWriteBuff:=ADR(sWrite), cbWriteLen:=LEN(sWrite), bExecute:=TRUE);
				IF NOT fbWrite.bBusy THEN
					IF fbWrite.bError THEN
						nWrState:=-4;
					ELSE
						nWrState:=10;
					END_IF
					fbWrite(bExecute:=FALSE);
				END_IF

			-4,
			10:fbClose(bExecute:=TRUE);
				IF NOT fbClose.bBusy THEN
					IF fbClose.bError THEN
						bBusyWriting:=FALSE;
						bInputDoWrite:=FALSE;
						nWrState:=0;
					ELSE
						bBusyWriting:=FALSE;
						bInputDoWrite:=FALSE;
						nWrState:=0;
					END_IF
					fbClose(bExecute:=FALSE);
				END_IF
		END_CASE
	END_IF



END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="act_AutoWrite_by_hour" Id="{42461ef9-079a-4615-a207-d3f2c31f97b8}">
      <Implementation>
        <ST><![CDATA[(*以“年月日时”为名称。也就是说，每小时产生一个
新的文件，以防止文件过大
*)

CASE nState OF

0:	(*wait for clearance*)
	nEntries:=0;
	bInputDoWrite:=bDiagDataLog_Release:=FALSE;
	nWrState:=0;
	IF NOT StartUp THEN
		nState:=1;
	END_IF

1:	(*try to create the directory*)
	fbMakeDir.bExecute:=FALSE;
	fbGetTime.START:=FALSE;
	fbMakeDir.sNetId:='';
	IF bDiagDataLogRunOn_WinCE THEN
		fbMakeDir.sPathName:=CONCAT(cnst_DiagDataLogFilePath_CE,cnst_SubDir_DiagDataLog);
	ELSE
		fbMakeDir.sPathName:=CONCAT(cnst_DiagDataLogFilePath_XP,cnst_SubDir_DiagDataLog);
	END_IF
	fbMakeDir.ePath:=PATH_GENERIC;
	fbMakeDir.tTimeout:=T#5s;
	nState:=2;

2:	fbMakeDir();
	fbGetTime();
	IF NOT fbMakeDir.bExecute THEN
		fbMakeDir.bExecute:=TRUE;
	ELSIF NOT fbMakeDir.bBusy THEN
		IF NOT fbGetTime.START THEN
			fbGetTime.START:=TRUE;
		ELSIF NOT fbGetTime.BUSY THEN
			IF fbGetTime.ERR THEN
				stDiagDataLogTime.wYear:=stDiagDataLogTime.wMonth:=stDiagDataLogTime.wDay:=0;
				stDiagDataLogTime.wHour:=stDiagDataLogTime.wMinute:=stDiagDataLogTime.wSecond:=0;
				stDiagDataLogTime.wMilliseconds:=0;
				msecond:=0;
			ELSE
				stDiagDataLogTime:=fbGetTime.TIMESTR;
				msecond:=fbGetTime.TIMESTR.wMilliseconds;
			END_IF
			fbGetTime(START:=FALSE);
			fbMakeDir(bExecute:=FALSE);
			nState:=11;
		END_IF
	END_IF


11:
	IF(nState>=10)THEN
		(*update and/or synchronize the clock*)
		stDiagDataLogTime.wMilliseconds:=stDiagDataLogTime.wMilliseconds+LREAL_TO_WORD(MIN(MAX(1000.0*fCycleTime,1.0),30000.0));
	
		IF(stDiagDataLogTime.wMilliseconds>=1000)THEN
			stDiagDataLogTime.wMilliseconds:=stDiagDataLogTime.wMilliseconds-1000;
			stDiagDataLogTime.wSecond:=stDiagDataLogTime.wSecond+1;
			IF(stDiagDataLogTime.wSecond>=60)THEN
				stDiagDataLogTime.wSecond:=stDiagDataLogTime.wSecond-60;
				stDiagDataLogTime.wMinute:=stDiagDataLogTime.wMinute+1;
				IF(stDiagDataLogTime.wMinute>=60)THEN
					stDiagDataLogTime.wMinute:=stDiagDataLogTime.wMinute-60;
					stDiagDataLogTime.wHour:=stDiagDataLogTime.wHour+1;
				END_IF
			END_IF
		END_IF
		msecond:=msecond+LREAL_TO_WORD(MIN(MAX(1000.0*fCycleTime,1.0),30000.0));
		fbGetTime(START:=(msecond>1100));
		IF fbGetTime.START THEN
			IF(NOT fbGetTime.BUSY)THEN
				IF(fbGetTime.ERR)THEN
					msecond:=0;
				ELSE
					stDiagDataLogTime:=fbGetTime.TIMESTR;
					msecond:=fbGetTime.TIMESTR.wMilliseconds;
				END_IF
			END_IF
		END_IF

		CASE nWrState OF

			0:	IF bInputDoWrite THEN
					bBusyWriting:= TRUE;
					IF bDiagDataLogRunOn_WinCE THEN
						sWrite:=CONCAT(cnst_DiagDataLogFilePath_CE,cnst_SubDir_DiagDataLog);
					ELSE
						sWrite:=CONCAT(cnst_DiagDataLogFilePath_XP,cnst_SubDir_DiagDataLog);//C:\DiagDataLog\
					END_IF
					sWrite:=CONCAT(sWrite,cnst_FileName);//C:\DiagDataLog\Sym
					stWrTime:=stDiagDataLogTime;
					stemp:=WORD_TO_STRING(stWrTime.wYear);//2020
					stemp:=CONCAT(stemp,'_');////2020_
					IF(stWrTime.wMonth<10)THEN//月份小于10，在月前加0
						stemp:=CONCAT(stemp,'0');////2020_06
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wMonth));
					stemp:=CONCAT(stemp,'_');//2020_06_
					IF(stWrTime.wDay<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wDay));//2020_06_30
					stemp:=CONCAT(stemp,'_');//2020_06_30_
					IF(stWrTime.wHour<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wHour));//2020_06_30_14,把小时记录
					stemp:=CONCAT(stemp,'.LOG');//2020_06_30_14.LOG,把小时记录
					fbOpen.sPathName:=CONCAT(sWrite,stemp);//C:\DiagDataLog\2020_06_30_14.LOG,完整名称
					fbOpen.bExecute:=FALSE;
					nWrState:=1;
				END_IF
	
			1:	fbOpen(sNetId:='', nMode:=FOPEN_MODEAPPEND OR FOPEN_MODETEXT, ePath:=PATH_GENERIC, tTimeout:=T#5S);
				IF NOT fbOpen.bExecute THEN
					fbOpen.bExecute:=TRUE;
				ELSIF NOT fbOpen.bBusy THEN
					IF fbOpen.bError THEN
						bInputDoWrite:=FALSE;
						nWrState:=0;
					ELSE
						fbWrite(sNetId:='', hFile:=fbOpen.hFile, pWriteBuff:=0, cbWriteLen:=0, bExecute:=FALSE, tTimeout:=T#5s);
						fbClose(sNetId:='', hFile:=fbOpen.hFile, bExecute:=FALSE, tTimeout:=T#5s);
						nWrState:=2;
					END_IF
					fbOpen(bExecute:=FALSE);
				END_IF

			2:	(**)
					stemp:=WORD_TO_STRING(stWrTime.wYear);
					stemp:=CONCAT(stemp,'.');
					IF(stWrTime.wMonth<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wMonth));
					stemp:=CONCAT(stemp,'.');
					IF(stWrTime.wDay<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wDay));
					stemp:=CONCAT(stemp,'|');
					IF(stWrTime.wHour<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wHour));
					stemp:=CONCAT(stemp,':');
					IF(stWrTime.wMinute<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wMinute));
					stemp:=CONCAT(stemp,':');
					IF(stWrTime.wSecond<10)THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wSecond));
					stemp:=CONCAT(stemp,':');
					IF(stWrTime.wMilliseconds<10)THEN
						stemp:=CONCAT(stemp,'00');
					END_IF
					IF(stWrTime.wMilliseconds<100)
					AND stWrTime.wMilliseconds>=10 THEN
						stemp:=CONCAT(stemp,'0');
					END_IF
					stemp:=CONCAT(stemp,WORD_TO_STRING(stWrTime.wMilliseconds));
					stemp:=CONCAT(stemp,'|');
					string_to_utf8(ADR(sTemp),ADR(STemp),SIZEOF(sTemp));//强制转换成utf8的格式，才能显示中文

				sWriteData:=sWrite:=CONCAT((stemp) , sActUseingString);
				sWrite:=CONCAT(sWrite,'$n');
				fbWrite(pWriteBuff:=ADR(sWrite), cbWriteLen:=LEN(sWrite), bExecute:=TRUE);
				nWrState:=3;

			3:	fbWrite(pWriteBuff:=ADR(sWrite), cbWriteLen:=LEN(sWrite), bExecute:=TRUE);
				IF NOT fbWrite.bBusy THEN
					IF fbWrite.bError THEN
						nWrState:=-4;
					ELSE
						nWrState:=10;
					END_IF
					fbWrite(bExecute:=FALSE);
				END_IF

			-4,
			10:fbClose(bExecute:=TRUE);
				IF NOT fbClose.bBusy THEN
					IF fbClose.bError THEN
						bBusyWriting:=FALSE;
						bInputDoWrite:=FALSE;
						nWrState:=0;
					ELSE
						bBusyWriting:=FALSE;
						bInputDoWrite:=FALSE;
						nWrState:=0;
					END_IF
					fbClose(bExecute:=FALSE);
				END_IF
		END_CASE
	END_IF



END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="act_CheckCom" Id="{627ba3f5-daff-420f-a89c-19a73c1792d3}">
      <Implementation>
        <ST><![CDATA[	IF sInputString<>'' AND nState=11 THEN
		FOR i:=1 TO 10 DO
			IF aStringBuffer[i]='' THEN
				aStringBuffer[i]:=sInputString;
				EXIT;
			END_IF
		END_FOR
		sInputString:='';
	END_IF

	IF aStringBuffer[1]<>''AND NOT bInputDoWrite THEN
		sActUseingString:=aStringBuffer[1];
		FOR i:=1 TO 9 DO
			aStringBuffer[i]:= aStringBuffer[i+1];
		END_FOR
		aStringBuffer[10]:='';
		bInputDoWrite:=TRUE;
	END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="act_Copy2USB" Id="{7a6375e0-4cd1-4915-91c6-7a94fad6cfda}">
      <Implementation>
        <ST><![CDATA[CASE CopyStep OF
	0:
		IF bCopyToUSB THEN
			CopyStep:=100;
		END_IF

	100:
		IF bDiagDataLogRunOn_WinCE THEN
			fbDirectoryCopy.srcPathName:=cnst_DiagDataLogFilePath_CE;
			fbDirectoryCopy.destPathName:=cnst_USB_FilePath_CE;
		ELSE
			fbDirectoryCopy.srcPathName:=cnst_DiagDataLogFilePath_XP;
			fbDirectoryCopy.destPathName:=cnst_USB_FilePath_XP;
		END_IF
		fbDirectoryCopy.DirectoryName:= LEFT(cnst_SubDir_DiagDataLog,LEN(cnst_SubDir_DiagDataLog)-1);
		fbDirectoryCopy.FileType:= 		'log';
		CopyStep:=200;

	200:
		fbDirectoryCopy(bExecute:=TRUE);
		IF fbDirectoryCopy.bBusy THEN
			CopyStep:=300;
		END_IF

	300:
		fbDirectoryCopy();
		IF NOT fbDirectoryCopy.bBusy THEN
			fbDirectoryCopy(bExecute:=FALSE);
			CopyStep:=400;
		END_IF

	400:
		IF NOT bCopyToUSB THEN
			CopyStep:=0;
		END_IF

END_CASE]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_DiagDataLogging_S">
      <LineId Id="197" Count="14" />
      <LineId Id="213" Count="1" />
      <LineId Id="217" Count="1" />
      <LineId Id="224" Count="1" />
      <LineId Id="219" Count="3" />
      <LineId Id="100" Count="0" />
    </LineIds>
    <LineIds Name="FB_DiagDataLogging_S.act_AutoDelete_by_day">
      <LineId Id="1" Count="31" />
      <LineId Id="99" Count="0" />
      <LineId Id="33" Count="28" />
      <LineId Id="100" Count="0" />
      <LineId Id="62" Count="13" />
      <LineId Id="101" Count="0" />
      <LineId Id="76" Count="22" />
    </LineIds>
    <LineIds Name="FB_DiagDataLogging_S.act_AutoDelete_by_hour">
      <LineId Id="1" Count="31" />
      <LineId Id="99" Count="0" />
      <LineId Id="33" Count="65" />
    </LineIds>
    <LineIds Name="FB_DiagDataLogging_S.act_AutoWrite_by_day">
      <LineId Id="0" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="1" Count="3" />
      <LineId Id="7" Count="7" />
      <LineId Id="17" Count="38" />
      <LineId Id="58" Count="53" />
      <LineId Id="220" Count="0" />
      <LineId Id="112" Count="57" />
      <LineId Id="217" Count="0" />
      <LineId Id="170" Count="35" />
    </LineIds>
    <LineIds Name="FB_DiagDataLogging_S.act_AutoWrite_by_hour">
      <LineId Id="0" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="1" Count="3" />
      <LineId Id="7" Count="7" />
      <LineId Id="17" Count="38" />
      <LineId Id="58" Count="111" />
      <LineId Id="217" Count="0" />
      <LineId Id="170" Count="35" />
    </LineIds>
    <LineIds Name="FB_DiagDataLogging_S.act_CheckCom">
      <LineId Id="0" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="8" />
      <LineId Id="14" Count="6" />
    </LineIds>
    <LineIds Name="FB_DiagDataLogging_S.act_Copy2USB">
      <LineId Id="1" Count="36" />
    </LineIds>
  </POU>
</TcPlcObject>